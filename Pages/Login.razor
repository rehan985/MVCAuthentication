
@page "/login"

@using MVCAuthentication.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js 
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager nm
<h3>login</h3>

<div>
    <input @bind="User " placeholder="userName"  />
     <input @bind="Password " placeholder="Password"  />
     <button @onclick="Authenticate" class="btn btn-primary" >Login</button>
</div>

@code {

    private UserAccount? _Model{ get; set; }

    public String? User { get; set; }
    public string? Password { get; set; }


    private async Task Authenticate()
    {
        // var userAccount = userAccountService.GetByUserName(model.UserName);
        _Model = UserAccountService.GetUserByName(User);
        _Model.UserName = User;
        if(_Model == null || _Model.Password != Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid userName");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = _Model.UserName,
                Role = _Model.Role

            });

        nm.NavigateTo("/", true); 
    }
}
